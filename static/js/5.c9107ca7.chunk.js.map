{"version":3,"sources":["companents/login/LoginForm/LoginForm.module.css","companents/login/Login.module.css","companents/login/LoginForm/LoginForm.jsx","companents/login/Login.jsx","companents/login/LoginContainer.jsx"],"names":["module","exports","maxLength30","maxLengthCreator","Input","Element","reduxForm","form","captchaUrl","handleSubmit","error","errorMessage","onSubmit","className","s","field","htmlFor","Field","input","placeholder","name","component","validate","required","id","type","checkbox","style","formSummaryError","captcha","src","alt","captchaImg","button","Login","login","formData","email","password","rememberMe","connect","state","isAuth","getIsAuth","getCaptchaUrl","getErrorMessage","props","to"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,KAAO,wBAAwB,MAAQ,yBAAyB,MAAQ,yBAAyB,SAAW,4BAA4B,OAAS,0BAA0B,QAAU,2BAA2B,WAAa,gC,oBCA/OD,EAAOC,QAAU,CAAC,MAAQ,uB,8ICMpBC,EAAcC,YAAiB,IAC/BC,EAAQC,YAAQ,SAuCPC,cAAU,CAAEC,KAAM,SAAlBD,EApCG,SAAC,GAAsD,IAApDE,EAAmD,EAAnDA,WAAYC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,aAElD,OACI,uBAAMC,SAAUH,EAAcI,UAAWC,IAAEP,KAA3C,UACI,sBAAKM,UAAWC,IAAEC,MAAlB,UACI,uBAAOC,QAAS,QAAhB,wBACA,cAACC,EAAA,EAAD,CAAOJ,UAAWC,IAAEI,MAAOC,YAAa,QAASC,KAAK,QAAQC,UAAWjB,EACrEkB,SAAU,CAACC,IAAUrB,GAAcsB,GAAI,aAE/C,sBAAKX,UAAWC,IAAEC,MAAlB,UACI,uBAAOC,QAAS,WAAhB,2BACA,cAACC,EAAA,EAAD,CAAOJ,UAAWC,IAAEI,MAAOC,YAAa,WAAYC,KAAK,WAAWC,UAAWjB,EAAOqB,KAAM,WACxFH,SAAU,CAACC,IAAUrB,GAAcsB,GAAI,gBAE/C,sBAAKX,UAAWC,IAAEC,MAAlB,UACI,uBAAOC,QAAS,WAAhB,yBACA,cAACC,EAAA,EAAD,CAAOJ,UAAWC,IAAEY,SAAUD,KAAM,WAAYL,KAAK,aAAaC,UAAWjB,OAEjF,iCACMM,GAASC,IAAiB,qBAAKE,UAAWc,IAAMC,iBAAtB,SACvBlB,GAASC,IAEd,sBAAKE,UAAWC,IAAEe,QAAlB,UACKrB,GAAc,qBAAKsB,IAAKtB,EAAYuB,IAAK,mBAAqBlB,UAAWC,IAAEkB,aAC3ExB,GAAc,cAACS,EAAA,EAAD,CAAOG,KAAM,UAAWC,UAAWjB,EAAOe,YAAa,wBAE1E,wBAAQN,UAAWC,IAAEmB,OAArB,4B,kBChBDC,EAjBD,SAAC,GAAuC,IAAtC1B,EAAqC,EAArCA,WAAY2B,EAAyB,EAAzBA,MAAOxB,EAAkB,EAAlBA,aAO/B,OACI,sBAAKE,UAAWC,IAAEqB,MAAlB,UACI,uCACA,cAAC,EAAD,CAAWvB,SARF,SAACwB,GAAc,IACvBC,EAAwCD,EAAxCC,MAAOC,EAAiCF,EAAjCE,SAAUC,EAAuBH,EAAvBG,WAAYV,EAAWO,EAAXP,QAClCM,EAAME,EAAOC,EAAUC,EAAYV,IAMArB,WAAYA,EAAYG,aAAcA,Q,yBCiBlE6B,uBARS,SAACC,GACrB,MAAO,CACHC,OAAQC,YAAUF,GAClBjC,WAAYoC,YAAcH,GAC1B9B,aAAckC,YAAgBJ,MAIE,CAAEN,WAA3BK,EAvBQ,SAACM,GAEpB,OAAGA,EAAMJ,OACC,cAAC,IAAD,CAAUK,GAAI,aAIpB,8BACI,cAAC,EAAD,eAAWD","file":"static/js/5.c9107ca7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"LoginForm_form__B04gM\",\"input\":\"LoginForm_input__18GuK\",\"field\":\"LoginForm_field__DMa6M\",\"checkbox\":\"LoginForm_checkbox__1-QEd\",\"button\":\"LoginForm_button__3o74K\",\"captcha\":\"LoginForm_captcha__3F9Ql\",\"captchaImg\":\"LoginForm_captchaImg__3GO5W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__1dB5g\"};","import { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/Validators';\r\nimport { Element } from '../../common/formControls/formControls';\r\nimport s from './LoginForm.module.css';\r\nimport style from '../../common/formControls/formControls.module.css';\r\n\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\nconst Input = Element('input');\r\n\r\n\r\nconst LoginForm = ({ captchaUrl, handleSubmit, error, errorMessage}) => {\r\n    debugger\r\n    return (\r\n        <form onSubmit={handleSubmit} className={s.form}>\r\n            <div className={s.field}>\r\n                <label htmlFor={'email'}>your email</label>\r\n                <Field className={s.input} placeholder={'email'} name='email' component={Input}\r\n                    validate={[required, maxLength30]} id={'email'} />\r\n            </div>\r\n            <div className={s.field}>\r\n                <label htmlFor={'password'}>your password</label>\r\n                <Field className={s.input} placeholder={'password'} name='password' component={Input} type={'password'}\r\n                    validate={[required, maxLength30]} id={'password'} />\r\n            </div>\r\n            <div className={s.field}>\r\n                <label htmlFor={'checkbox'}>remember me</label>\r\n                <Field className={s.checkbox} type={'checkbox'} name='rememberMe' component={Input} />\r\n            </div>\r\n            <div>\r\n                {(error || errorMessage) && <div className={style.formSummaryError}>\r\n                    {error || errorMessage}\r\n                </div>}\r\n                <div className={s.captcha}>\r\n                    {captchaUrl && <img src={captchaUrl} alt={'anti-bot symbols'}  className={s.captchaImg}/>}\r\n                    {captchaUrl && <Field name={'captcha'} component={Input} placeholder={'anti-bot symbols'} />}\r\n                </div>\r\n                <button className={s.button}>\r\n                    login\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\n\r\n\r\nexport default reduxForm({ form: 'login' })(LoginForm);\r\n","import React from 'react';\r\nimport LoginForm from './LoginForm/LoginForm';\r\nimport s from './Login.module.css';\r\n\r\nconst Login = ({captchaUrl, login, errorMessage}) => {\r\n\r\n    const onSubmit = (formData) => {\r\n        let {email, password, rememberMe, captcha} = formData;\r\n        login(email, password, rememberMe, captcha);\r\n    }\r\n\r\n    return (\r\n        <div className={s.login}>\r\n            <h1>LOGIN</h1>\r\n            <LoginForm onSubmit={onSubmit} captchaUrl={captchaUrl} errorMessage={errorMessage}/>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\nexport default Login;","import { connect } from 'react-redux';\r\nimport Login from './Login';\r\nimport { login } from '../../Redux/authReducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { getCaptchaUrl, getErrorMessage, getIsAuth } from '../../Redux/selectors/auth-selector';\r\n\r\n\r\n\r\nconst LoginContainer = (props) => {\r\n\r\n    if(props.isAuth) {\r\n       return <Redirect to={'/profile'} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Login {...props} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: getIsAuth(state),\r\n        captchaUrl: getCaptchaUrl(state), \r\n        errorMessage: getErrorMessage(state)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { login })(LoginContainer);"],"sourceRoot":""}